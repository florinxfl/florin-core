// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libunity.djinni

#ifndef DJINNI_GENERATED_NJSIWITNESSCONTROLLER_HPP
#define DJINNI_GENERATED_NJSIWITNESSCONTROLLER_HPP


#include "result_record.hpp"
#include "witness_account_statistics_record.hpp"
#include "witness_estimate_info_record.hpp"
#include "witness_funding_result_record.hpp"
#include <cstdint>
#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

#include <napi.h>
#include <uv.h>
#include <i_witness_controller.hpp>

using namespace std;

class NJSIWitnessController: public Napi::ObjectWrap<NJSIWitnessController> {
public:

    static Napi::FunctionReference constructor;
    static Napi::Object Init(Napi::Env env, Napi::Object exports);
    NJSIWitnessController(const Napi::CallbackInfo& info) : Napi::ObjectWrap<NJSIWitnessController>(info){};

private:
    /** Get information on min/max witness periods, weights etc. */
    Napi::Value getNetworkLimits(const Napi::CallbackInfo& info);

    /** Get an estimate of weights/parts that a witness account will be funded with */
    Napi::Value getEstimatedWeight(const Napi::CallbackInfo& info);

    /** Fund a witness account */
    Napi::Value fundWitnessAccount(const Napi::CallbackInfo& info);

    /** Renew a witness account */
    Napi::Value renewWitnessAccount(const Napi::CallbackInfo& info);

    /** Get information on account weight and other witness statistics for account */
    Napi::Value getAccountWitnessStatistics(const Napi::CallbackInfo& info);

    /** Turn compounding on/off */
    void setAccountCompounding(const Napi::CallbackInfo& info);

    /** Check state of compounding; returns a percentage between 1 and 100, or 0 if not compounding */
    Napi::Value isAccountCompounding(const Napi::CallbackInfo& info);

    /** Get the witness address of the account */
    Napi::Value getWitnessAddress(const Napi::CallbackInfo& info);

    /** Get the optimal distribution amounts for the account; totalNetworkWeight should be the value of "total_weight_eligible_raw" */
    Napi::Value getOptimalWitnessDistribution(const Napi::CallbackInfo& info);

    /** Same as the above but calculates all the paramaters from the account UUID; its more efficient to use the other call if you already have these values */
    Napi::Value getOptimalWitnessDistributionForAccount(const Napi::CallbackInfo& info);

    /** Redistribute a witness account to its optimal distribution, call 'getOptimalWitnessDistribution' first to calculate this */
    Napi::Value optimiseWitnessAccount(const Napi::CallbackInfo& info);

};
#endif //DJINNI_GENERATED_NJSIWITNESSCONTROLLER_HPP
