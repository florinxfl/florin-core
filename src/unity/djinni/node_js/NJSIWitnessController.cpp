// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libunity.djinni

#include "NJSIWitnessController.hpp"
using namespace std;

Napi::Value NJSIWitnessController::getNetworkLimits(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSIWitnessController::getNetworkLimits needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = IWitnessController::getNetworkLimits();

        //Wrap result in node object
        auto arg_0 = Napi::Object::New(env);
        for(auto const& arg_0_elem : result)
        {
            auto arg_0_first = Napi::String::New(env, arg_0_elem.first);
            auto arg_0_second = Napi::String::New(env, arg_0_elem.second);
            arg_0.Set(arg_0_first, arg_0_second);
        }


        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSIWitnessController::getEstimatedWeight(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSIWitnessController::getEstimatedWeight needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    auto arg_0 = info[0].ToNumber().Int64Value();
    auto arg_1 = info[1].ToNumber().Int64Value();

    try
    {
        auto result = IWitnessController::getEstimatedWeight(arg_0,arg_1);

        //Wrap result in node object
        auto arg_2 = Napi::Object::New(env);
        auto arg_2_1 = Napi::Value::From(env, result.network_weight);
        arg_2.Set("network_weight", arg_2_1);
        auto arg_2_2 = Napi::Value::From(env, result.weight);
        arg_2.Set("weight", arg_2_2);
        auto arg_2_3 = Napi::Value::From(env, result.parts);
        arg_2.Set("parts", arg_2_3);
        auto arg_2_4 = Napi::Value::From(env, result.estimated_witness_probability);
        arg_2.Set("estimated_witness_probability", arg_2_4);
        auto arg_2_5 = Napi::Value::From(env, result.estimated_blocks_per_day);
        arg_2.Set("estimated_blocks_per_day", arg_2_5);
        auto arg_2_6 = Napi::Value::From(env, result.estimated_daily_earnings);
        arg_2.Set("estimated_daily_earnings", arg_2_6);
        auto arg_2_7 = Napi::Value::From(env, result.estimated_lifetime_earnings);
        arg_2.Set("estimated_lifetime_earnings", arg_2_7);


        return arg_2;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSIWitnessController::fundWitnessAccount(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 4)
    {
        Napi::Error::New(env, "NJSIWitnessController::fundWitnessAccount needs 4 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();
    auto arg_2 = info[2].ToNumber().Int64Value();
    auto arg_3 = info[3].ToNumber().Int64Value();

    try
    {
        auto result = IWitnessController::fundWitnessAccount(arg_0,arg_1,arg_2,arg_3);

        //Wrap result in node object
        auto arg_4 = Napi::Object::New(env);
        auto arg_4_1 = Napi::String::New(env, result.status);
        arg_4.Set("status", arg_4_1);
        auto arg_4_2 = Napi::String::New(env, result.txid);
        arg_4.Set("txid", arg_4_2);
        auto arg_4_3 = Napi::Value::From(env, result.fee);
        arg_4.Set("fee", arg_4_3);


        return arg_4;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSIWitnessController::renewWitnessAccount(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSIWitnessController::renewWitnessAccount needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();

    try
    {
        auto result = IWitnessController::renewWitnessAccount(arg_0,arg_1);

        //Wrap result in node object
        auto arg_2 = Napi::Object::New(env);
        auto arg_2_1 = Napi::String::New(env, result.status);
        arg_2.Set("status", arg_2_1);
        auto arg_2_2 = Napi::String::New(env, result.txid);
        arg_2.Set("txid", arg_2_2);
        auto arg_2_3 = Napi::Value::From(env, result.fee);
        arg_2.Set("fee", arg_2_3);


        return arg_2;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSIWitnessController::getAccountWitnessStatistics(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSIWitnessController::getAccountWitnessStatistics needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    try
    {
        auto result = IWitnessController::getAccountWitnessStatistics(arg_0);

        //Wrap result in node object
        auto arg_1 = Napi::Object::New(env);
        auto arg_1_1 = Napi::String::New(env, result.request_status);
        arg_1.Set("request_status", arg_1_1);
        auto arg_1_2 = Napi::String::New(env, result.account_status);
        arg_1.Set("account_status", arg_1_2);
        auto arg_1_3 = Napi::Value::From(env, result.account_weight);
        arg_1.Set("account_weight", arg_1_3);
        auto arg_1_4 = Napi::Value::From(env, result.account_weight_at_creation);
        arg_1.Set("account_weight_at_creation", arg_1_4);
        auto arg_1_5 = Napi::Value::From(env, result.account_parts);
        arg_1.Set("account_parts", arg_1_5);
        auto arg_1_6 = Napi::Value::From(env, result.account_amount_locked);
        arg_1.Set("account_amount_locked", arg_1_6);
        auto arg_1_7 = Napi::Value::From(env, result.account_amount_locked_at_creation);
        arg_1.Set("account_amount_locked_at_creation", arg_1_7);
        auto arg_1_8 = Napi::Value::From(env, result.network_tip_total_weight);
        arg_1.Set("network_tip_total_weight", arg_1_8);
        auto arg_1_9 = Napi::Value::From(env, result.network_total_weight_at_creation);
        arg_1.Set("network_total_weight_at_creation", arg_1_9);
        auto arg_1_10 = Napi::Value::From(env, result.account_initial_lock_period_in_blocks);
        arg_1.Set("account_initial_lock_period_in_blocks", arg_1_10);
        auto arg_1_11 = Napi::Value::From(env, result.account_remaining_lock_period_in_blocks);
        arg_1.Set("account_remaining_lock_period_in_blocks", arg_1_11);
        auto arg_1_12 = Napi::Value::From(env, result.account_expected_witness_period_in_blocks);
        arg_1.Set("account_expected_witness_period_in_blocks", arg_1_12);
        auto arg_1_13 = Napi::Value::From(env, result.account_estimated_witness_period_in_blocks);
        arg_1.Set("account_estimated_witness_period_in_blocks", arg_1_13);
        auto arg_1_14 = Napi::Value::From(env, result.account_initial_lock_creation_block_height);
        arg_1.Set("account_initial_lock_creation_block_height", arg_1_14);
        auto arg_1_15 = Napi::Value::From(env, result.compounding_percent);
        arg_1.Set("compounding_percent", arg_1_15);
        auto arg_1_16 = Napi::Value::From(env, result.is_optimal);
        arg_1.Set("is_optimal", arg_1_16);


        return arg_1;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
void NJSIWitnessController::setAccountCompounding(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSIWitnessController::setAccountCompounding needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    auto arg_1 = info[1].ToNumber().Int32Value();
    try
    {
        IWitnessController::setAccountCompounding(arg_0,arg_1);
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return;
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return;
    }
}
Napi::Value NJSIWitnessController::isAccountCompounding(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSIWitnessController::isAccountCompounding needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    try
    {
        auto result = IWitnessController::isAccountCompounding(arg_0);

        //Wrap result in node object
        auto arg_1 = Napi::Value::From(env, result);

        return arg_1;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSIWitnessController::getWitnessAddress(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSIWitnessController::getWitnessAddress needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    try
    {
        auto result = IWitnessController::getWitnessAddress(arg_0);

        //Wrap result in node object
        auto arg_1 = Napi::String::New(env, result);

        return arg_1;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSIWitnessController::getOptimalWitnessDistribution(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 3)
    {
        Napi::Error::New(env, "NJSIWitnessController::getOptimalWitnessDistribution needs 3 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    auto arg_0 = info[0].ToNumber().Int64Value();
    auto arg_1 = info[1].ToNumber().Int64Value();
    auto arg_2 = info[2].ToNumber().Int64Value();

    try
    {
        auto result = IWitnessController::getOptimalWitnessDistribution(arg_0,arg_1,arg_2);

        //Wrap result in node object
        auto arg_3 = Napi::Array::New(env);
        for(size_t arg_3_id = 0; arg_3_id < result.size(); arg_3_id++)
        {
            auto arg_3_elem = Napi::Value::From(env, result[arg_3_id]);
            arg_3.Set((int)arg_3_id,arg_3_elem);
        }


        return arg_3;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSIWitnessController::getOptimalWitnessDistributionForAccount(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSIWitnessController::getOptimalWitnessDistributionForAccount needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    try
    {
        auto result = IWitnessController::getOptimalWitnessDistributionForAccount(arg_0);

        //Wrap result in node object
        auto arg_1 = Napi::Array::New(env);
        for(size_t arg_1_id = 0; arg_1_id < result.size(); arg_1_id++)
        {
            auto arg_1_elem = Napi::Value::From(env, result[arg_1_id]);
            arg_1.Set((int)arg_1_id,arg_1_elem);
        }


        return arg_1;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSIWitnessController::optimiseWitnessAccount(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 3)
    {
        Napi::Error::New(env, "NJSIWitnessController::optimiseWitnessAccount needs 3 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();
    vector<int64_t> arg_2;
    auto arg_2_container = info[2].As<Napi::Array>();
    for(uint32_t arg_2_id = 0; arg_2_id < arg_2_container.Length(); arg_2_id++)
    {
        if(arg_2_container.Get(arg_2_id).IsNumber())
        {
            auto arg_2_elem = arg_2_container.Get(arg_2_id).ToNumber().Int64Value();
            arg_2.emplace_back(arg_2_elem);
        }
    }


    try
    {
        auto result = IWitnessController::optimiseWitnessAccount(arg_0,arg_1,arg_2);

        //Wrap result in node object
        auto arg_3 = Napi::Object::New(env);
        auto arg_3_1 = Napi::Value::From(env, result.result);
        arg_3.Set("result", arg_3_1);
        auto arg_3_2 = Napi::String::New(env, result.info);
        arg_3.Set("info", arg_3_2);


        return arg_3;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}

Napi::FunctionReference NJSIWitnessController::constructor;

Napi::Object NJSIWitnessController::Init(Napi::Env env, Napi::Object exports) {

    // Hook all method callbacks
    Napi::Function func = DefineClass(env, "NJSIWitnessController", {
    InstanceMethod("getNetworkLimits", &NJSIWitnessController::getNetworkLimits),
    InstanceMethod("getEstimatedWeight", &NJSIWitnessController::getEstimatedWeight),
    InstanceMethod("fundWitnessAccount", &NJSIWitnessController::fundWitnessAccount),
    InstanceMethod("renewWitnessAccount", &NJSIWitnessController::renewWitnessAccount),
    InstanceMethod("getAccountWitnessStatistics", &NJSIWitnessController::getAccountWitnessStatistics),
    InstanceMethod("setAccountCompounding", &NJSIWitnessController::setAccountCompounding),
    InstanceMethod("isAccountCompounding", &NJSIWitnessController::isAccountCompounding),
    InstanceMethod("getWitnessAddress", &NJSIWitnessController::getWitnessAddress),
    InstanceMethod("getOptimalWitnessDistribution", &NJSIWitnessController::getOptimalWitnessDistribution),
    InstanceMethod("getOptimalWitnessDistributionForAccount", &NJSIWitnessController::getOptimalWitnessDistributionForAccount),
    InstanceMethod("optimiseWitnessAccount", &NJSIWitnessController::optimiseWitnessAccount),
    });
    // Create a peristent reference to the class constructor. This will allow a function called on a class prototype and a function called on instance of a class to be distinguished from each other.
    constructor = Napi::Persistent(func);
    // Call the SuppressDestruct() method on the static data prevent the calling to this destructor to reset the reference when the environment is no longer available.
    constructor.SuppressDestruct();
    exports.Set("NJSIWitnessController", func);
    return exports;
}
